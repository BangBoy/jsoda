<?xml version="1.0" encoding="UTF-8"?>
<project name="jsoda" default="dist">

  <!-- NOTE: update version here to generate new version of jar file. -->
  <property name="version" value="0.8.1"/>
  <property name="jarname" value="${ant.project.name}-${version}.jar"/>
  <property name="zipname" value="${ant.project.name}-src-${version}.zip"/>

  <property name="src.dir" value="src"/>
  <property name="sample.dir" value="sample"/>
  <property name="lib.dir" value="lib"/>
  <property name="build.dir" value="build"/>
  <property name="classes.dir" value="${build.dir}/classes"/>
  <property name="dist.dir" value="dist"/>
  <property name="javadoc.dir" value="javadoc"/>

  <path id="compile.classpath">
    <fileset dir="${lib.dir}" includes="*.jar"/>
  </path>

  <path id="jar.compile.classpath">
    <path refid="compile.classpath"/>
    <fileset dir="${dist.dir}" includes="*.jar"/>
  </path>

  <path id="run.classpath">
    <path refid="compile.classpath"/>
    <pathelement location="${classes.dir}"/>
  </path>


  <fail message="Not all library jars are in lib.  See lib/readme for all the dependent libraries.">
    <condition>
      <not>
        <and>
          <!-- Apache commons-logging, commons-lang, commons-codec, commons-beanutils, httpclient, httpcore -->
          <available classname="org.apache.commons.logging.Log" classpathref="compile.classpath"/>
          <available classname="org.apache.commons.lang.builder.ReflectionToStringBuilder" classpathref="compile.classpath"/>
          <available classname="org.apache.commons.codec.binary.Base64" classpathref="compile.classpath"/>
          <available classname="org.apache.commons.beanutils.ConvertUtils" classpathref="compile.classpath"/>
          <available classname="org.apache.http.HttpEntityEnclosingRequest" classpathref="compile.classpath"/>
          <available classname="org.apache.http.client.methods.HttpUriRequest" classpathref="compile.classpath"/>
          <!-- AWS SDK aws-java-sdk.jar -->
          <available classname="com.amazonaws.auth.AWSCredentials" classpathref="compile.classpath"/>
          <!-- JSON library jackson -->
          <available classname="org.codehaus.jackson.map.ObjectMapper" classpathref="compile.classpath"/>
        </and>
      </not>
    </condition>
  </fail>

  <target name="check-lib">
  </target>

  <target name="compile" depends="check-lib" description="Compile all java files">
    <mkdir dir="${classes.dir}"/>
    <javac target="1.6" debug="true" destdir="${classes.dir}">
      <src path="${src.dir}"/>
      <classpath refid="compile.classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="jar" depends="compile" description="Generate jar file">
    <mkdir dir="${dist.dir}"/>
    <jar jarfile="${dist.dir}/${jarname}" basedir="${classes.dir}/"/>
  </target>

  <target name="javadoc" depends="compile" description="Generate Javadoc files">
    <!-- create javadocs -->
    <mkdir dir="${javadoc.dir}"/>
    <javadoc packagenames="wwutil.db.*,wwutil.jsoda.*"
           sourcepath="${src.dir}"
           defaultexcludes="yes"
           classpathref="compile.classpath"
           destdir="${javadoc.dir}"
           author="true"
           version="true"
           use="true"
           windowtitle="${ant.project.name} documentation version: ${version}">
    </javadoc>
  </target>

  <target name="zipsrc" depends="javadoc,clean" description="Package the source and jar files">
    <zip destfile="${dist.dir}/${zipname}" basedir="." excludes="${dist.dir}/*.zip, ${lib.dir}/*.jar, utest/${lib.dir}/*.jar, .git/**" />
  </target>

  <target name="dist" depends="jar,javadoc,zipsrc" description="Generate the distribution jar file and javadocs.">
  </target>

  <target name="compile-sample" depends="jar" description="Compile the sample files">
    <mkdir dir="${classes.dir}"/>
    <javac target="1.6" debug="true" destdir="${classes.dir}">
      <src path="${sample.dir}"/>
      <classpath refid="jar.compile.classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="sample1" depends="compile-sample" description="Run the sample files">
    <java classname="Sample1">
      <classpath refid="run.classpath" />
    </java>
  </target>

  <target name="sample2" depends="compile-sample" description="Run the sample files">
    <java classname="Sample2">
      <classpath refid="run.classpath" />
    </java>
  </target>

  <target name="clean" depends="" description="Delete all temporary files and directories">
    <delete dir="${build.dir}"/>
    <subant target="clean" buildpath="utest"/>
  </target>

  <target name="cleanall" depends="clean" description="Delete all temporary and generated files and directories">
    <delete dir="${javadoc.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

</project>
